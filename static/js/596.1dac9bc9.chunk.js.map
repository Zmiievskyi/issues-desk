{"version":3,"file":"static/js/596.1dac9bc9.chunk.js","mappings":"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","sources":["webpack://git-issues/./src/components/issues/IssuesItem.module.scss?e2ec","components/issues/IssuesItem.tsx","webpack://git-issues/./src/components/issues/IssuesList.module.scss?bd92","components/issues/IssuesList.tsx","pages/IssuesBoard.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"paper_card\":\"IssuesItem_paper_card__qb9Gp\",\"pencil_border\":\"IssuesItem_pencil_border__UjJW0\"};","import { Draggable } from \"react-beautiful-dnd\";\r\nimport moment from \"moment\";\r\nimport Style from \"./IssuesItem.module.scss\";\r\n\r\nexport function IssuesItem({\r\n  id,\r\n  index,\r\n  title,\r\n  created_at,\r\n  comments,\r\n  user,\r\n}: {\r\n  id: number;\r\n  index: number;\r\n  title: string;\r\n  created_at: string;\r\n  comments: any;\r\n  user: string;\r\n}) {\r\n  const day = moment(created_at).startOf(\"day\").fromNow(); // a day ago\r\nconst formatedTitle = title.length > 25 ? title.slice(0, 25) + \"...\" : title;\r\n  return (\r\n    <Draggable key={id} draggableId={id.toString()} index={index}>\r\n      {(provided) => (\r\n        <div\r\n          className={Style.paper_card}\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <h4 className=\"h5 mb-2\">{formatedTitle}</h4>\r\n          <div className=\"mb-2\"><i>Created: {day}</i></div>\r\n          <div>\r\n            <span>User: {user}</span> | <span>Comments: {comments}</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"board\":\"IssuesList_board__bDQIO\"};","import { useEffect } from \"react\";\r\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\r\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\nimport \"react-loading-skeleton/dist/skeleton.css\";\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\nimport { IssuesItem } from \"../issues/IssuesItem\";\r\nimport { getDone, getTodo } from \"../../redux/operations/boardOperations\";\r\nimport Style from \"./IssuesList.module.scss\";\r\nimport { setRepository } from \"../../redux/operations/repOperations\";\r\n\r\nexport function IssuesList() {\r\n  const repoRef: any = useAppSelector((state) => state.repo.repository);\r\n  const tokenRef = useAppSelector((state) => state.repo.token);\r\n  const boardsRef: { id: number; title: string; items: any[] }[] =\r\n    useAppSelector((state) => state.boards.boards);\r\n  const statusRef: { isLoading: boolean; isError: boolean } = useAppSelector(\r\n    (state) => state.boards.status\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const url = [...repoRef.adress];\r\n    url.splice(2, 1, tokenRef.toString());\r\n    dispatch(getDone(url));\r\n    dispatch(getTodo(url));\r\n    dispatch(setRepository(url));\r\n  }, [repoRef.adress, tokenRef, dispatch]);\r\n\r\n  return (\r\n    <>\r\n      {boardsRef?.map(({ title, items }, index) => (\r\n        <SkeletonTheme\r\n          key={index}\r\n          baseColor=\" rgb(175, 173, 188)\"\r\n          highlightColor=\"#444\"\r\n        >\r\n          <Droppable key={index} droppableId={title}>\r\n            {(provided: DroppableProvided) => (\r\n              <div\r\n                className={Style.board}\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n              >\r\n                <h3 className=\"bg-white w-100 py-3 text-center\">{title}</h3>\r\n                {!statusRef.isLoading ? (\r\n                  items.map(({ id, title, created_at, comments, user }, index) => (\r\n                    <IssuesItem\r\n                      key={id}\r\n                      id={id}\r\n                      title={title}\r\n                      index={index}\r\n                      created_at={created_at}\r\n                      comments={comments}\r\n                      user={user.login}\r\n                    />\r\n                  ))\r\n                ) : (\r\n                  <p>\r\n                    <Skeleton\r\n                      count={5}\r\n                      borderRadius={28}\r\n                      width={350}\r\n                      height={150}\r\n                      style={{\r\n                        margin: \"20px\",\r\n                      }}\r\n                    />\r\n                  </p>\r\n                )}\r\n\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </SkeletonTheme>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { useAppDispatch, useAppSelector } from \"../redux/hooks\";\r\nimport { setBoards } from \"../redux/reducer/boardSlice\";\r\nimport { IssuesList } from \"../components/issues/IssuesList\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nexport const IssuesBoard = () => {\r\n  const tokenRef: any = useAppSelector((state) => state.repo.token);\r\n  const boardsRef: { id: number; title: string; items: any[] }[] =\r\n    useAppSelector((state) => state.boards.boards);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onDragEnd = (result: any) => {\r\n    if (!result.destination) return;\r\n\r\n    const newBoardState = boardsRef.map((board) => {\r\n      if (board.title === result.source.droppableId) {\r\n        const copyBoard = [...board.items];\r\n        const dragItem: any[] = copyBoard.splice(result.source.index, 1);\r\n\r\n        if (result.source.droppableId === result.destination.droppableId) {\r\n          copyBoard.splice(result.destination.index, 0, dragItem[0]);\r\n        }\r\n        return { ...board, items: copyBoard };\r\n      }\r\n      if (board.title === result.destination.droppableId) {\r\n        const copyDragBoard: any = boardsRef.find(\r\n          (b) => b.title === result.source.droppableId\r\n        )?.items;\r\n        const dragItem = [...copyDragBoard].splice(result.source.index, 1);\r\n        const copyDropBoard = [...board.items];\r\n        copyDropBoard.splice(result.destination.index, 0, dragItem[0]);\r\n\r\n        return { ...board, items: copyDropBoard };\r\n      }\r\n\r\n      return board;\r\n    });\r\n\r\n    dispatch(setBoards(newBoardState));\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <Container className=\"d-flex\" style={{justifyContent: 'space-around'}}>\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          {tokenRef ? <IssuesList /> : null}\r\n        </DragDropContext>\r\n      </Container>\r\n    </main>\r\n  );\r\n};\r\n"],"names":["IssuesItem","_ref","id","index","title","created_at","comments","user","day","moment","startOf","fromNow","formatedTitle","length","slice","_jsx","Draggable","draggableId","toString","children","provided","_jsxs","_objectSpread","className","Style","ref","innerRef","draggableProps","dragHandleProps","IssuesList","repoRef","useAppSelector","state","repo","repository","tokenRef","token","boardsRef","boards","statusRef","status","dispatch","useAppDispatch","useEffect","url","_toConsumableArray","adress","splice","getDone","getTodo","setRepository","_Fragment","map","items","SkeletonTheme","baseColor","highlightColor","Droppable","droppableId","droppableProps","isLoading","Skeleton","count","borderRadius","width","height","style","margin","_ref2","login","placeholder","IssuesBoard","Container","justifyContent","DragDropContext","onDragEnd","result","destination","newBoardState","board","source","copyBoard","dragItem","_boardsRef$find","copyDragBoard","find","b","copyDropBoard","setBoards"],"sourceRoot":""}